	
	// Shift-JIS かどうか
	#define ctype isshiftjis(%1)	(((0x80 <= %1) && (%1 <= 0x9F)) || ((0xE0 <= %1) && (%1 <= 0xFE)))
	#define EM_SETSEL	0x00B1
	
	#include "scrollbar.as"
	
	gosub *readfunctions
	
	bufid = 0
	buffer bufid
	mainid = 1
	screen mainid, ginfo(20), ginfo(21), 0,,, 640, 480
	oncmd gosub *hscroll, WM_HSCROLL
	oncmd gosub *vscroll, WM_VSCROLL
	oncmd gosub *resizing, WM_SIZING
	
	pos 18*2, ginfo_winy-18*2 :CreateScrollBar ginfo_winx-18*4, 18, 0, 0, 0, 0, 0
	m_hscrollID = stat
	hM_hscroll = objinfo(m_hscrollID, 2)
	// 縦
	pos ginfo_winx-18*2, 18*2 :CreateScrollBar 18, ginfo_winy-18*4, 1, 0, 0, 0, 0
	m_vscrollID = stat
	hM_vscroll = objinfo(m_vscrollID, 2)
	pos 0, 0
	gosub *resizing
	
	text = {"	A	0
A	A	1
AA	A	2
AAA	A	3
AAAA	4"}
	word = "A"
	sideword = " \\t\\n!\"#$%&\'()=~|`{+*}<>?-^\\@[;:],./\\"
	
	sdim keynames :dim keycodes :keymax = 0
	repeat 255
		str_ = getKeyName(cnt)
		if strlen(str_) {
			keynames.keymax = str_
			keycodes.keymax = cnt
			keymax++
		}
	loop
	sdim keys
	repeat length(keynames)
		keys += keynames.cnt+"["+keycodes.cnt+"]\n"
	loop
	
	objsize 200, 20
	objmode 2, 0 :font msgothic, 12
	
	combox com, 0, keys
	button gosub "find", *jump
	mes "find"
	input word
	mes "from"
	mesbox text, 200, 100, 5, 0 :editID = stat
	mes "side word"
	input sideword
	yy = ginfo_cy
	
	onkey gosub *key
	
	stop
	
*hscroll
	if lparam == hM_hscroll {
		MoveScrollBar :x = stat
		title "x:"+x
		viewcx = x :gosub *draw
	}
	return
	
*vscroll
	if lparam == hM_vscroll {
		MoveScrollBar :y = stat
		title "y:"+y
		viewcy = y :gosub *draw
	}
	return
*resizing
	smove ginfo(12)-30, 15, hM_vscroll
	smove 215, ginfo(13)-30, hM_hscroll
	ssize 15, ginfo(13)-45, hM_vscroll
	ssize ginfo(12)-45-200, 15, hM_hscroll
	
	ScrollBar_SetRange hM_hscroll, 0, 0, limit(maxwidth-(ginfo(12)-200), 0, INT_MAX)+fs*10, ginfo(12)/4
	ScrollBar_SetRange hM_vscroll, 1, 0, limit(maxheight-ginfo(13), 0, INT_MAX)+fs*10, ginfo(13)/4
	ScrollBar_SetStep hM_hscroll, ginfo(12), hfs
	ScrollBar_SetStep hM_vscroll, ginfo(13), fs
	return
	
*key
	objsel -1
	if stat == editID {
		if wparam == 'A' :if getkey(17) & 0x8000 :sendmsg objinfo(editID, 2), EM_SETSEL, 0, -1
	}else :if resultf {
		if wparam == 37 :if viewcx+hfs < maxwidth :viewcx += hfs
		if wparam == 39 :if 0 <= viewcx-hfs :viewcx -= hfs
		if wparam == 38 :if viewcy+fs <= maxheight :viewcy += fs
		if wparam == 40 :if 0 <= viewcy-fs :viewcy -= fs
		ScrollBar_SetPos hM_hscroll, viewcx
		ScrollBar_SetPos hM_vscroll, viewcy
		gosub *draw
	}
	return
	
*draw
	redraw 0
	pos 0, yy :mes "sideword["+arys+"]"
	repeat maxindexes
		mes "["+ indexes.cnt +"] ["+ strmid(text, indexes.cnt, strlen(word)) +"]"
	loop
	colorwhite :boxf 200, 0, ginfo(12), ginfo(13) :color
	pos 200, 0 :gcopy bufid, viewcx, viewcy, maxwidth, maxheight+fs
	redraw 1
	return
	
*jump
	viewcx = 0
	viewcy = 0
	strrep sideword, "\\t", "\t"
	strrep sideword, "\\n", "\n"
	strrep sideword, "\\\\", "\\"
	dim ary :sdim arys
	repeat strlen(sideword)
		ary.cnt = peek(sideword, cnt)
		arys += strf("%02X,", ary.cnt)
	loop
	colorwhite :boxf 0, y, ginfo(12), ginfo(13) :color
	
	// inside funcs
	maxfuncindexes = 0 :maxindexes = 0
	dim funcindexes :dim lenfuncnames
	repeat length(functions)
		if instr(text, 0, functions.cnt) == -1 :continue
		findWordByWord text, functions.cnt, ary, funcindex :maxindexes = stat
		logmes "name["+ functions.cnt +"]("+ maxindexes +")"
		len = strlen(functions.cnt)
		repeat maxindexes
			await
			funcindexes.maxfuncindexes = funcindex.cnt
			lenfuncnames.maxfuncindexes = len
			maxfuncindexes++
		loop
	loop
	logmes "functions("+maxfuncindexes+")"
	
	// find
	findWordByWord text, word, ary, indexes :maxindexes = stat
	gosub *hilight
	gosub *resizing
	gosub *draw
	resultf = 1
	return
	
*hilight
	maxwidth = 1
	maxheight = 1
	tabsize = 4
	initcx = 0
	initcy = 0
	cx = initcx
	cy = initcy
	fs = 12
	hfs = fs/2
	el = 0
	prevtab = 0
	for i, 0, strlen(text), 1
		if maxwidth < cx :maxwidth = cx
		if maxheight < cy :maxheight = cy
		
		token = peek(text, i)
		if el {if token == 0xA :el = 0 :cx = initcx :cy += fs :prevtab = 0 :_continue
		}else :if token == 0xD :el++ :_continue
		if token == '\t' {
			cx += (tabsize-prevtab\tabsize)*hfs
			prevtab = 0
			_continue
		}
		if isshiftjis(token) {
			cx += fs
			i++
			ntoken++
		}else {
			cx += hfs
		}
		prevtab++
	next
	
	buffer bufid, maxwidth, maxheight+fs
	font msgothic, fs
	tabsize = 4
	
	cx = initcx
	cy = initcy
	el = 0
	prevtab = 0
	editclr = 0
	insidekeyword = 0
	color
	for i, 0, strlen(text), 1
		token = peek(text, i)
		if el {if token == 0xA :el = 0 :cx = initcx :cy += fs :prevtab = 0 :_continue
		}else :if token == 0xD :el++ :_continue
		if token == '\t' {
			cx += (tabsize-prevtab\tabsize)*hfs
			prevtab = 0
			_continue
		}
		if editclr == 0 {
			repeat maxindexes
				if i == indexes.cnt :editclr = strlen(word) :break
			loop
		}
		if editclr :color :boxf cx, cy, cx+hfs, cy+fs :colorwhite
		
		if insidekeyword == 0 {
			repeat maxfuncindexes
				if i == funcindexes.cnt :insidekeyword = lenfuncnames.cnt :break
			loop
		}
		if insidekeyword :color 0, 128, 255
		//
		
		if isshiftjis(token) {
			pos cx, cy :mes strmid(text, i, 2)
			cx += fs
			i++
			ntoken++
		}else {
			pos cx, cy :mes sstr(token)
			cx += hfs
		}
		prevtab++
	
		//
		if editclr :editclr-- :if editclr == 0 :color
		if insidekeyword :insidekeyword-- :if insidekeyword == 0 :color
	next
	pos initcx, cy+fs
	mes "EOF"
	
	gsel mainid
	
	return
	
*readfunctions
	read_files = {"C:\\hsp331\\hsphelp
sysval.hs
ex_macro.hs
i_graph.hs
i_file.hs
i_com.hs
i_mem.hs
i_mmedia.hs
i_object.hs
i_prep.hs
i_prog.hs
i_stdfunc.hs
i_stdio.hs
i_string.hs
"}
	sdim functions
	funcmax = 0
	notesel@hsp read_files
	repeat notemax
		noteget@hsp inf, cnt
		if instr(inf, 0, "\\") != -1 :chdir inf :continue
		
		exist inf
		logmes "file:["+ inf +"]("+strsize+")"
		if strsize == -1 :continue
		sdim filebuf, strsize+1
		bload inf, filebuf, strsize
		
		notesel@hsp filebuf
		repeat notemax
			noteget@hsp ol, cnt
			if ol == "%index" {
				noteget@hsp ol, cnt+1
				functions.funcmax = ol
				funcmax++
				logmes ""+ol
				continue cnt+2
			}
		loop
		
		noteunsel
	loop
	return
	
	#module
	// 指定単語が両サイドにある場合だけhit
	#deffunc findWordByWord var str_, str word_, array words_, array indexes_
		dim indexes_
		word = word_
		flag = 1
		maxindexes = 0
		len_words_ = length(words_)
		len_word_ = strlen(word_)
		len_str_ = strlen(str_)
		i = 0
		repeat
			j = instr(str_, i, word_)
			if j == -1 :break
			n = j+i
			if n {
				nif = 0
				repeat len_words_
					if peek(str_, n-1) == words_.cnt :nif = 1 :break
				loop
			}else :nif = 1
			if nif {
				if n != len_str_-1 {
					nif = 0
					repeat len_words_
						if peek(str_, n+len_word_) == words_.cnt :nif = 1 :break
					loop
				}else :nif = 1
			}
			
			if nif {
				indexes_.maxindexes = n
				maxindexes++
			}
			
			i += len_word_ + j
		loop
		return maxindexes
	#global
	
	
	#module
	#uselib "user32.dll"
	#cfunc	MapVirtualKey		"MapVirtualKeyA"		int, int
	#cfunc	GetKeyNameText		"GetKeyNameTextA"		int, int, int
	#defcfunc getKeyName int btKeyCode
		sdim szBuf, 128
		nScanCode = MapVirtualKey(btKeyCode, 0)
		if (nScanCode) {
			switch btKeyCode
			case VK_LEFT:
			case VK_UP:
			case VK_RIGHT:
			case VK_DOWN:
			case VK_PRIOR:
			case VK_NEXT:
			case VK_END:
			case VK_HOME:
			case VK_INSERT:
			case VK_DELETE:
			case VK_DIVIDE:
			case VK_NUMLOCK:
				nScanCode |= 0x100;
				swbreak;
			swend
		}
		if GetKeyNameText(nScanCode << 16, varptr(szBuf), 128) {
			// szBufにキー名が入る
			return szBuf
		}
	return ""
	#global
	
