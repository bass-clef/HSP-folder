	
	
	makefile ""+dir_exe+"\\code.rb"
	
	rubycode1 = {"
import socket
import sys


class KNPJumanConnect():
  def __init__(self):
    self.juman_s = None
    self.knp_s = None


  def juman_socket(self, name, port, option=""):
    while(not self.juman_s):
      try:
        self.juman_s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.juman_s.connect((name, port))
      except:
        sys.stderr.write("Jumanとの接続に失敗しました\n")
        return False


    sys.stderr.write("Jumanと接続しました\n")
    input_a = ["RUN ", option, "\n"]
    input_mode = "".join(input_a)
    self.juman_s.sendall(input_mode)
    sys.stderr.write(self.juman_s.recv(1024))
    if option=="":
      sys.stderr.write("JUMAN running on BASIC MODE.....\n")
    else:
      sys.stderr.write("JUMAN running on "+option+" MODE.....\n")
    return True


  def post_juman(self, context):
    juman_result = ""
    self.juman_s.sendall(context+"\n")
    juman_result = self.juman_s.recv(4096)
    return juman_result


  def juman_close(self):
    self.juman_s.close()


  def knp_socket(self, name, port, option=""):
    while(not self.knp_s):
      try:
        self.knp_s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.knp_s.connect((name, port))
      except:
        sys.stderr.write("KNPとの接続に失敗しました\n")
        return False
    sys.stderr.write("KNPと接続しました\n")
    input_a = ["RUN ", option, "\n"]
    input_mode = "".join(input_a)
    self.knp_s.sendall(input_mode)
    sys.stderr.write(self.knp_s.recv(1024))
    sys.stderr.write(self.knp_s.recv(1024))
    if option == "":
      sys.stderr.write("KNP running on BASIC MODE.....\n")
    else:
      sys.stderr.write("KNP running on "+option+" MODE.....\n")
    return True


  def post_knp(self, context):
    knp_result = ""
    knp_result_list = []
    self.knp_s.sendall(self.post_juman(context))
    while 1:
      f = self.knp_s.recv(1024)
      knp_result_list.append(f)
      if f.find("EOS\n")!=-1:
        break
    knp_result = "".join(knp_result_list)
    return knp_result


  def knp_close(self):
    self.knp_s.close()

"}
	rubycode = {"
# coding: sjis

require 'socket'
require 'jumanknp'

jumanknp_s = JumanKnpParser.new('test')

#JUMAN/KNPのポートとオプションを指定する
jumanknp_s.juman_socket("localhost",32000,'-e2')
jumanknp_s.knp_socket("localhost",31000,'-tab')

while text = gets
  
  jumanresult = jumanknp_s.juman_parse(text)
  knpresult = jumanknp_s.knp_parse(jumanresult)
  print knpresult

end

jumanknp_s.juman_close
jumanknp_s.knp_close
"}
	
	rubycode = "2"
	
	screen 0, 800, 300
	font msgothic, 12
	sdim dst
	makefile ""+dir_desktop+"test.rb"
	mes "["+ruby(rubycode)+"]"
	
	stop
	#module __RUBY__
	// 
	#defcfunc ruby str buffer_
		equa = buffer_
		set equa
		compile
	return refstr
	// 計算
	#defcfunc calc str equation
		equa = equation
		strrep equa, "this", "dst"
		set "dst = "+ equa +"\nprint(dst)"
		compile
	return int(refstr)
	
	// ruby用テキストファイル作成
	#deffunc makefile str file
		RUBY_CODE_FILE = file
		sdim buf
		bsave RUBY_CODE_FILE, buf
	return
	#deffunc set str buffer_
		buf = buffer_
		bsave RUBY_CODE_FILE, buf, strlen(buf)
	return
	// 実行
	#deffunc compile
		pipe "ruby \""+RUBY_CODE_FILE+"\"", dst
	return
	
	#uselib "hspext.dll"
	#func pipeexec	pipeexec	5
	#func pipeput	pipeput		0
	#func pipeget	pipeget		$83
	// 送信
	#deffunc pipe str cmd, var ln
		sdim buf :sdim ln
		pipeexec buf, cmd, 1
		if stat == 0 {
			repeat
				pipeget ln
				if stat == 0 :break
				wait 1
			loop
		}
	return buf
	#global
